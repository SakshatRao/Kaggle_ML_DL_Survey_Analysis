scale_x_log10() +
scale_fill_gradient(low = black, high = light_blue)
g <- g +
basic_plot_dec() +
basic_color_dec(light_blue) +
basic_orient_dec() +
labs(title = "Salary-Age Density Plot", subtitle = "Understanding the relationship between Age & Salary", caption = "(Salary is in logarithmic scale for visualization)", fill = "Density") +
xlab("Salary") +
ylab("Age") +
theme(
legend.title = element_text(colour = white, face = 'bold'),
legend.text = element_text(colour = white),
legend.background = element_rect(fill = alpha(light_blue, 0)),
legend.key = element_rect(fill = alpha(light_blue, 0)),
legend.position = c(0.95, 0.6),
legend.key.height = unit(1.5, "cm"),
panel.grid.major.y = element_line(color = alpha(black, 0)),
)
g
python_cmds = "
new_age_ppp_data['final_mid_salary_cats'] = new_age_ppp_data['final_mid_salary'].apply(lambda x: 'low' if x * 1000000 < 5000 else 'high' if x * 1000000 > 175000 else 'medium')
"
py_run_string(python_cmds)
py$new_age_ppp_data$final_mid_salary_cats <- factor(py$new_age_ppp_data$final_mid_salary_cats, levels = c('low', 'medium', 'high'))
g <- ggplot(data = py$new_age_ppp_data) + geom_boxplot(aes(x = final_mid_salary_cats, y = final_mid_age * 100 + 18), colour = alpha(dark_green, 1), fill = alpha(green, 0.7), outlier.color = green, outlier.alpha = 0.01)
g <- g +
basic_plot_dec() +
basic_color_dec(green) +
basic_orient_dec() +
labs(title = "Age for different Salary Categories") +
xlab("Salary Categories") +
ylab("Age") +
theme(
axis.text.x = element_text(angle = 0, hjust = 0.5)
)
g
py$ug_data$Age <- factor(py$ug_data$Age, levels = c("<20", "20-23", "24-29", "30-39", "40-49", ">=50"))
py$pg_data$Age <- factor(py$pg_data$Age, levels = c("<20", "20-23", "24-29", "30-39", "40-49", ">=50"))
breaks <- c(-20, 0, 20, 40)
g <- ggplot() +
geom_bar(data = py$ug_data, aes(y = Age, x = Composition), stat = 'identity', colour = white, fill = alpha(light_blue, 0.6)) +
geom_bar(data = py$pg_data, aes(y = Age, x = Neg_Composition), stat = 'identity', colour = white, fill = alpha(green, 0.6)) +
geom_vline(xintercept = 0, colour = white, size = 2) +
scale_x_continuous(breaks = breaks, labels = sapply(breaks, function(x) { abs(x) }))
g <- g +
basic_plot_dec() +
basic_color_dec(white) +
basic_orient_dec(TRUE) +
labs(title = "General Student Age Distribution", subtitle = "For undergraduate & postgraduate students") +
xlab("Percentage") +
ylab("Age")
g
python_cmds = "
new_ppp_cats_data = pd.merge(new_ppp_data, new_age_ppp_data, how = 'left', on = 'kaggler_id')
"
py_run_string(python_cmds)
python_cmds = "
coding_exp_order = ['< 1 years', '1-3 years', '3-5 years', '5-10 years', '10-20 years', '20+ years']
coding_exp = pd.pivot_table(new_ppp_cats_data.groupby(['final_mid_salary_cats', 'Q_4'])['kaggler_id'].aggregate('count').reset_index(drop = False), index = 'final_mid_salary_cats', columns = 'Q_4')['kaggler_id'][coding_exp_order].loc[['low', 'medium', 'high']]
coding_exp_plot_df = coding_exp / np.repeat(coding_exp.sum(axis = 1).values, repeats = 6).reshape((3, 6)) * 100
"
py_run_string(python_cmds)
py$coding_exp_plot_df <- melt(py$coding_exp_plot_df)
py$coding_exp_plot_df$id <- c('low-salary', 'mid-salary', 'high-salary')
py$coding_exp_plot_df$id <- factor(py$coding_exp_plot_df$id, levels = c('low-salary', 'mid-salary', 'high-salary'))
py$coding_exp_plot_df$text <- apply(py$coding_exp_plot_df, 1, function(x) { paste(round(as.numeric(x['value']) * 100) / 100, "% of ", x['id'], " Kagglers have\n", x['variable'], " of coding experience", sep = "") })
g <- ggplot(data = py$coding_exp_plot_df, aes(x = id, y = variable, fill = value, text = text)) + geom_tile() + theme_ipsum()
g <- g +
basic_plot_dec() +
basic_color_dec(light_blue) +
basic_orient_dec() +
labs(title = "Coding Experience vs. Salary", subtitle = "Heatmap", fill = "Percentage") +
xlab("Salary Category") +
ylab("Coding Experience") +
theme(
legend.title = element_text(colour = white, face = 'bold'),
legend.text = element_text(colour = white),
legend.background = element_rect(fill = alpha(light_blue, 0)),
legend.key = element_rect(fill = alpha(light_blue, 0)),
legend.position = c(0.95, 0.6),
legend.key.height = unit(1.5, "cm"),
axis.text.x = element_text(angle = 0)
)
g <- ggplotly(g, tooltip="text")
g
python_cmds = "
new_ppp_cats_data['Q_6'] = new_ppp_cats_data['Q_6'].map({
'5-10 years': '5-10',
'20 or more years': '20+',
'3-4 years': '3-4',
'4-5 years': '4-5',
'I do not use machine learning methods': '<1',
'Under 1 year': '<1',
'2-3 years': '2-3',
'1-2 years': '1-2',
'10-20 years': '10-20',
})
ml_exp_order = ['<1', '1-2', '2-3', '3-4', '4-5', '5-10', '10-20', '20+']
ml_exp = pd.pivot_table(new_ppp_cats_data.groupby(['final_mid_salary_cats', 'Q_6'])['kaggler_id'].aggregate('count').reset_index(drop = False), index = 'final_mid_salary_cats', columns = 'Q_6')['kaggler_id'][ml_exp_order].loc[['low', 'medium', 'high']]
ml_exp_plot_df = ml_exp / np.repeat(ml_exp.sum(axis = 1).values, repeats = 8).reshape((3, 8)) * 100
"
py_run_string(python_cmds)
py$ml_exp_plot_df <- melt(py$ml_exp_plot_df)
py$ml_exp_plot_df$id <- c('low-salary', 'mid-salary', 'high-salary')
py$ml_exp_plot_df$id <- factor(py$ml_exp_plot_df$id, levels = c('low-salary', 'mid-salary', 'high-salary'))
py$ml_exp_plot_df$text <- apply(py$ml_exp_plot_df, 1, function(x) { paste(round(as.numeric(x['value']) * 100) / 100, "% of ", x['id'], " Kagglers have\n", x['variable'], " of ML experience", sep = "") })
g <- ggplot(data = py$ml_exp_plot_df, aes(x = id, y = variable, fill = value, text = text)) + geom_tile() + theme_ipsum()
g <- g +
basic_plot_dec() +
basic_color_dec(light_blue) +
basic_orient_dec() +
labs(title = "ML Experience vs. Salary", subtitle = "Heatmap", fill = "Percentage") +
xlab("Salary Category") +
ylab("ML Experience") +
theme(
legend.title = element_text(colour = white, face = 'bold'),
legend.text = element_text(colour = white),
legend.background = element_rect(fill = alpha(light_blue, 0)),
legend.key = element_rect(fill = alpha(light_blue, 0)),
legend.position = c(0.95, 0.6),
legend.key.height = unit(1.5, "cm"),
axis.text.x = element_text(angle = 0)
)
g <- ggplotly(g, tooltip="text")
g
python_cmds = "
new_ppp_cats_data['Q_11'] = new_ppp_cats_data['Q_11'].map({
'$100-$999': '100-999',
'$10,000-$99,999': '10000-99999',
'$1000-$9,999': '1000-9999',
'$0 ($USD)': '0',
'$1-$99': '1-99',
'$100,000 or more ($USD)': '>100000'
})
money_spent_order = ['0', '1-99', '100-999', '1000-9999', '10000-99999', '>100000']
money_spent = pd.pivot_table(new_ppp_cats_data.groupby(['final_mid_salary_cats', 'Q_11'])['kaggler_id'].aggregate('count').reset_index(drop = False), index = 'final_mid_salary_cats', columns = 'Q_11')['kaggler_id'][money_spent_order].loc[['low', 'medium', 'high']]
money_spent_plot_df = money_spent / np.repeat(money_spent.sum(axis = 1).values, repeats = 6).reshape((3, 6)) * 100
"
py_run_string(python_cmds)
py$money_spent_plot_df <- melt(py$money_spent_plot_df)
py$money_spent_plot_df$id <- c('low-salary', 'mid-salary', 'high-salary')
py$money_spent_plot_df$id <- factor(py$money_spent_plot_df$id, levels = c('low-salary', 'mid-salary', 'high-salary'))
py$money_spent_plot_df$text <- apply(py$money_spent_plot_df, 1, function(x) { paste(round(as.numeric(x['value']) * 100) / 100, "% of ", x['id'], " Kagglers have\nspent $", x['variable'], " on ML services", sep = "") })
g <- ggplot(data = py$money_spent_plot_df, aes(x = id, y = variable, fill = value, text = text)) + geom_tile() + theme_ipsum()
g <- g +
basic_plot_dec() +
basic_color_dec(light_blue) +
basic_orient_dec() +
labs(title = "Money Spent on ML services vs. Salary", subtitle = "Heatmap", fill = "Percentage") +
xlab("Salary Category") +
ylab("Money Spent") +
theme(
legend.title = element_text(colour = white, face = 'bold'),
legend.text = element_text(colour = white),
legend.background = element_rect(fill = alpha(light_blue, 0)),
legend.key = element_rect(fill = alpha(light_blue, 0)),
legend.position = c(0.95, 0.6),
legend.key.height = unit(1.5, "cm"),
axis.text.x = element_text(angle = 0),
plot.subtitle = element_text(colour = white)
)
g <- ggplotly(g, tooltip="text")
g
python_cmds = "
coding_exps = new_ppp_cats_data['Q_4'].value_counts().loc[coding_exp_order]
starting_points = [0 , 1 , 3 , 5 , 10 , 20]
widths =          [1 , 2 , 2 , 5 , 10 , 20]
ending_points = np.add(starting_points, widths)
mid_points = np.add(starting_points, np.divide(widths, 2))
new_coding_exp_data = new_data.copy()
new_coding_exp_data['min_coding_exp'] = new_coding_exp_data['Q_4'].apply(lambda x: starting_points[coding_exp_order.index(x)]) / 50
new_coding_exp_data['mid_coding_exp'] = new_coding_exp_data['Q_4'].apply(lambda x: mid_points[coding_exp_order.index(x)]) / 50
new_coding_exp_data['max_coding_exp'] = new_coding_exp_data['Q_4'].apply(lambda x: ending_points[coding_exp_order.index(x)]) / 50
new_coding_exp_data_only_adj = new_coding_exp_data[['min_coding_exp', 'max_coding_exp']]
"
py_run_string(python_cmds)
colnames(py$new_coding_exp_data_only_adj) <- c('left', 'right')
fitted_distribution_gamma <- fitdistcens(py$new_coding_exp_data_only_adj, "gamma")
alpha <- fitted_distribution_gamma$estimate[['shape']]
beta <- fitted_distribution_gamma$estimate[['rate']]
python_cmds = "
coding_exp_bins = [[*x] for x in [*new_coding_exp_data.groupby(['min_coding_exp', 'max_coding_exp'])['kaggler_id'].aggregate('count').index]]
coding_exp_bins = pd.DataFrame(coding_exp_bins, columns = ['min', 'max'])
"
py_run_string(python_cmds)
find_actual_mid <- function(min, max, alpha, beta) {
samples <- rgamma(1000000, shape = alpha, rate = beta)
actual_mids <- c()
for (idx in 1:length(min)) {
actual_mids <- c(actual_mids, mean(samples[(samples >= min[idx]) & (samples <= max[idx])]))
}
actual_mids
}
py$coding_exp_bins <- py$coding_exp_bins %>%
mutate(final_mid = find_actual_mid(min, max, alpha, beta))
python_cmds = "
new_coding_exp_data = pd.merge(new_coding_exp_data, coding_exp_bins, how = 'inner', left_on = ['min_coding_exp', 'max_coding_exp'], right_on = ['min', 'max'])
salary_age_coding_exp_data = pd.merge(new_ppp_data[['final_mid', 'kaggler_id']], new_age_data[['final_mid', 'kaggler_id']], how = 'inner', on = 'kaggler_id', suffixes = ['_salary', '_age'])
salary_age_coding_exp_data = pd.merge(salary_age_coding_exp_data, new_coding_exp_data[['final_mid', 'kaggler_id']], how = 'inner', on = 'kaggler_id')
salary_age_coding_exp_data = pd.merge(salary_age_coding_exp_data, new_ppp_cats_data[['final_mid_salary_cats', 'kaggler_id']], how = 'inner', on = 'kaggler_id')
salary_age_coding_exp_data = salary_age_coding_exp_data.rename(columns = {'final_mid': 'final_mid_coding_exp'})
salary_age_coding_exp_data['coding_exp_by_age'] = salary_age_coding_exp_data['final_mid_coding_exp'] * 50 / ((salary_age_coding_exp_data['final_mid_age'] * 100) + 18 - 18) * 100
salary_age_coding_exp_data_plot_df = salary_age_coding_exp_data.groupby('final_mid_salary_cats')['coding_exp_by_age'].aggregate(['mean', 'median']).reset_index(drop = False).reset_index(drop = False)
salary_age_coding_exp_data_plot_df = salary_age_coding_exp_data_plot_df.rename({'mean': 'Mean', 'median': 'Median'}, axis = 1)
"
py_run_string(python_cmds)
breaks <- c(0, 1, 2)
g1 <- ggplot(melt(py$salary_age_coding_exp_data_plot_df, id.vars = c('index', 'final_mid_salary_cats'))) +
geom_line(aes(x = index, y = value, colour = as.factor(variable)), size = 1) +
facet_wrap(~variable, scales = 'free_y', nrow = 2) +
scale_colour_manual(values=c(light_blue, green)) +
theme(
strip.background = element_rect(fill = white),
strip.text = element_text(colour = black, face = "bold", size = 10),
legend.position = 'none',
axis.text.x.bottom = element_text(angle = 0, hjust = 0.5),
)
g1 <- g1 +
basic_plot_dec() +
basic_color_dec(white) +
basic_orient_dec() +
xlab("Salary Category") +
ylab("Coding Experience-to-Total Experience Ratio (%)") +
scale_x_continuous(breaks = breaks, labels = c('low-salary', 'mid-salary', 'high-salary'))
g1
python_cmds = "
ml_exps = new_ppp_cats_data['Q_6'].value_counts().loc[ml_exp_order]
starting_points = [0 , 1 , 2 , 3 , 4 , 5 , 10 , 20]
widths =          [1 , 1 , 1 , 1 , 1 , 5 , 10 , 10]
ending_points = np.add(starting_points, widths)
mid_points = np.add(starting_points, np.divide(widths, 2))
new_ml_exp_data = new_data.copy()
new_ml_exp_data['Q_6'] = new_ml_exp_data['Q_6'].map({
'5-10 years': '5-10',
'20 or more years': '20+',
'3-4 years': '3-4',
'4-5 years': '4-5',
'I do not use machine learning methods': '<1',
'Under 1 year': '<1',
'2-3 years': '2-3',
'1-2 years': '1-2',
'10-20 years': '10-20',
})
new_ml_exp_data = new_ml_exp_data[~pd.isnull(new_ml_exp_data['Q_6'])]
new_ml_exp_data['min_ml_exp'] = new_ml_exp_data['Q_6'].apply(lambda x: starting_points[ml_exp_order.index(x)]) / 50
new_ml_exp_data['mid_ml_exp'] = new_ml_exp_data['Q_6'].apply(lambda x: mid_points[ml_exp_order.index(x)]) / 50
new_ml_exp_data['max_ml_exp'] = new_ml_exp_data['Q_6'].apply(lambda x: ending_points[ml_exp_order.index(x)]) / 50
new_ml_exp_data_only_adj = new_ml_exp_data[['min_ml_exp', 'max_ml_exp']]
"
py_run_string(python_cmds)
colnames(py$new_ml_exp_data_only_adj) <- c('left', 'right')
fitted_distribution_gamma <- fitdistcens(py$new_ml_exp_data_only_adj, "gamma")
alpha <- fitted_distribution_gamma$estimate[['shape']]
beta <- fitted_distribution_gamma$estimate[['rate']]
python_cmds = "
ml_exp_bins = [[*x] for x in [*new_ml_exp_data.groupby(['min_ml_exp', 'max_ml_exp'])['kaggler_id'].aggregate('count').index]]
ml_exp_bins = pd.DataFrame(ml_exp_bins, columns = ['min', 'max'])
"
py_run_string(python_cmds)
find_actual_mid <- function(min, max, alpha, beta) {
samples <- rgamma(1000000, shape = alpha, rate = beta)
actual_mids <- c()
for (idx in 1:length(min)) {
actual_mids <- c(actual_mids, mean(samples[(samples >= min[idx]) & (samples <= max[idx])]))
}
actual_mids
}
py$ml_exp_bins <- py$ml_exp_bins %>%
mutate(final_mid = find_actual_mid(min, max, alpha, beta))
python_cmds = "
new_ml_exp_data = pd.merge(new_ml_exp_data, ml_exp_bins, how = 'inner', left_on = ['min_ml_exp', 'max_ml_exp'], right_on = ['min', 'max'])
salary_age_ml_exp_data = pd.merge(new_ppp_data[['final_mid', 'kaggler_id']], new_age_data[['final_mid', 'kaggler_id']], how = 'inner', on = 'kaggler_id', suffixes = ['_salary', '_age'])
salary_age_ml_exp_data = pd.merge(salary_age_ml_exp_data, new_ml_exp_data[['final_mid', 'kaggler_id']], how = 'inner', on = 'kaggler_id')
salary_age_ml_exp_data = pd.merge(salary_age_ml_exp_data, new_ppp_cats_data[['final_mid_salary_cats', 'kaggler_id']], how = 'inner', on = 'kaggler_id')
salary_age_ml_exp_data = salary_age_ml_exp_data.rename(columns = {'final_mid': 'final_mid_ml_exp'})
salary_age_ml_exp_data['ml_exp_by_age'] = salary_age_ml_exp_data['final_mid_ml_exp'] * 50 / ((salary_age_ml_exp_data['final_mid_age'] * 100) + 18 - 18) * 100
salary_age_ml_exp_data_plot_df = salary_age_ml_exp_data.groupby('final_mid_salary_cats')['ml_exp_by_age'].aggregate(['mean', 'median']).reset_index(drop = False).reset_index(drop = False)
salary_age_ml_exp_data_plot_df = salary_age_ml_exp_data_plot_df.rename({'mean': 'Mean', 'median': 'Median'}, axis = 1)
"
py_run_string(python_cmds)
breaks <- c(0, 1, 2)
g2 <- ggplot(melt(py$salary_age_ml_exp_data_plot_df, id.vars = c('index', 'final_mid_salary_cats'))) +
geom_line(aes(x = index, y = value, colour = as.factor(variable)), size = 1) +
facet_wrap(~variable, scales = 'free_y', nrow = 2) +
scale_colour_manual(values=c(light_blue, green)) +
theme(
strip.background = element_rect(fill = white),
strip.text = element_text(colour = black, face = "bold", size = 10),
legend.position = 'none',
axis.text.x.bottom = element_text(angle = 0, hjust = 0.5),
)
g2 <- g2 +
basic_plot_dec() +
basic_color_dec(white) +
basic_orient_dec() +
xlab("Salary Category") +
ylab("ML Experience-to-Total Experience Ratio (%)") +
scale_x_continuous(breaks = breaks, labels = c('low-salary', 'mid-salary', 'high-salary'))
g2
python_cmds = "
money_spents = new_ppp_cats_data['Q_11'].value_counts().loc[money_spent_order]
starting_points = [0 , 1  , 100 , 1000 , 10000 , 100000]
widths =          [1 , 99 , 900 , 9000 , 90000 , 100000]
ending_points = np.add(starting_points, widths)
mid_points = np.add(starting_points, np.divide(widths, 2))
new_money_spent_data = new_data.copy()
new_money_spent_data['Q_11'] = new_money_spent_data['Q_11'].map({
'$100-$999': '100-999',
'$10,000-$99,999': '10000-99999',
'$1000-$9,999': '1000-9999',
'$0 ($USD)': '0',
'$1-$99': '1-99',
'$100,000 or more ($USD)': '>100000'
})
new_money_spent_data = new_money_spent_data.loc[~pd.isnull(new_money_spent_data['Q_11'])]
new_money_spent_data['min_money_spent'] = new_money_spent_data['Q_11'].apply(lambda x: starting_points[money_spent_order.index(x)]) / 100000
new_money_spent_data['mid_money_spent'] = new_money_spent_data['Q_11'].apply(lambda x: mid_points[money_spent_order.index(x)]) / 100000
new_money_spent_data['max_money_spent'] = new_money_spent_data['Q_11'].apply(lambda x: ending_points[money_spent_order.index(x)]) / 100000
new_money_spent_data_only_adj = new_money_spent_data[['min_money_spent', 'max_money_spent']]
"
py_run_string(python_cmds)
colnames(py$new_money_spent_data_only_adj) <- c('left', 'right')
fitted_distribution_gamma <- fitdistcens(py$new_money_spent_data_only_adj, "gamma")
alpha <- fitted_distribution_gamma$estimate[['shape']]
beta <- fitted_distribution_gamma$estimate[['rate']]
python_cmds = "
money_spent_bins = [[*x] for x in [*new_money_spent_data.groupby(['min_money_spent', 'max_money_spent'])['kaggler_id'].aggregate('count').index]]
money_spent_bins = pd.DataFrame(money_spent_bins, columns = ['min', 'max'])
"
py_run_string(python_cmds)
find_actual_mid <- function(min, max, alpha, beta) {
samples <- rgamma(1000000, shape = alpha, rate = beta)
actual_mids <- c()
for (idx in 1:length(min)) {
actual_mids <- c(actual_mids, mean(samples[(samples >= min[idx]) & (samples <= max[idx])]))
}
actual_mids
}
py$money_spent_bins <- py$money_spent_bins %>%
mutate(final_mid = find_actual_mid(min, max, alpha, beta))
python_cmds = "
new_money_spent_data = pd.merge(new_money_spent_data, money_spent_bins, how = 'inner', left_on = ['min_money_spent', 'max_money_spent'], right_on = ['min', 'max'])
salary_money_spent_data = pd.merge(new_ppp_data[['final_mid', 'kaggler_id']], new_money_spent_data[['final_mid', 'kaggler_id']], how = 'inner', on = 'kaggler_id', suffixes = ['_salary', '_money_spent'])
salary_money_spent_data = pd.merge(salary_money_spent_data, new_ppp_cats_data[['final_mid_salary_cats', 'kaggler_id']], how = 'inner', on = 'kaggler_id')
salary_money_spent_data['money_spent_by_salary'] = (salary_money_spent_data['final_mid_money_spent'] * 100000 / 5) / (salary_money_spent_data['final_mid_salary'] * 1000000) * 100
salary_money_spent_data_plot_df = salary_money_spent_data.groupby('final_mid_salary_cats')['money_spent_by_salary'].aggregate(['mean', 'median']).reset_index(drop = False).reset_index(drop = False)
salary_money_spent_data_plot_df = salary_money_spent_data_plot_df.rename({'mean': 'Mean', 'median': 'Median'}, axis = 1)
"
py_run_string(python_cmds)
breaks <- c(0, 1, 2)
g3 <- ggplot(melt(py$salary_money_spent_data_plot_df, id.vars = c('index', 'final_mid_salary_cats'))) +
geom_line(aes(x = index, y = value, colour = as.factor(variable)), size = 1) +
facet_wrap(~variable, scales = 'free_y', nrow = 2) +
scale_colour_manual(values=c(light_blue, green)) +
theme(
strip.background = element_rect(fill = white),
strip.text = element_text(colour = black, face = "bold", size = 10),
legend.position = 'none',
axis.text.x.bottom = element_text(angle = 0, hjust = 0.5),
)
g3 <- g3 +
basic_plot_dec() +
basic_color_dec(white) +
basic_orient_dec() +
xlab("Salary Category") +
ylab("Money Spent on ML-to-Salary Ratio (%)") +
scale_x_continuous(breaks = breaks, labels = c('low-salary', 'mid-salary', 'high-salary'))
g <- ggplot_gtable(ggplot_build(g3))
striprt <- which(grepl('strip-t-1-1', g$layout$name))
rect_idx <- which(grepl('rect', g$grobs[[striprt]]$grobs[[1]]$childrenOrder))
title_idx <- which(grepl('title', g$grobs[[striprt]]$grobs[[1]]$childrenOrder))
g$grobs[[striprt]]$grobs[[1]]$children[[rect_idx]]$gp$fill <- red
g$grobs[[striprt]]$grobs[[1]]$children[[title_idx]]$children[[1]]$gp$col <- white
plot(g)
python_cmds = "
# TODO: in R
median_high_price = gpu_prices_data.groupby(['Memory_Capacity_category'])['ppp_price'].aggregate('median').loc['high']
low_salary_kaggler_afford_years = median_high_price / ((0 + 5000) * 0.1 / 2)
mid_salary_kaggler_afford_months = median_high_price / ((5000 + 175000) * 0.1 / 2) * 12
high_salary_kaggler_afford_days = median_high_price / ((175000 + 2000000) * 0.1 / 2) * 365
"
py_run_string(python_cmds)
low_salary_kaggler_afford_years <- paste(round(py$low_salary_kaggler_afford_years * 10) / 10, " years", sep = "")
mid_salary_kaggler_afford_months <- paste(round(py$mid_salary_kaggler_afford_months * 10) / 10, " months", sep = "")
high_salary_kaggler_afford_days <- paste(round(py$high_salary_kaggler_afford_days * 10) / 10, " days", sep = "")
print(c(low_salary_kaggler_afford_years, mid_salary_kaggler_afford_months, high_salary_kaggler_afford_days))
library(png)
library(grid)
img <- readPNG("https://github.com/SakshatRao/Kaggle_ML_DL_Survey_Analysis/blob/main/gpu_afford.png?raw=true")
library(png)
library(grid)
img <- readPNG("https://raw.githubusercontent.com/SakshatRao/Kaggle_ML_DL_Survey_Analysis/main/gpu_afford.png")
library(png)
library(grid)
img <- readPNG("../gpu_afford.png")
g <- rasterGrob(img, interpolate=TRUE)
fig(10, 10)
qplot(1:10, 1:10, geom="blank") +
annotation_custom(g, xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf) + theme_void() +
annotate("text", x = 3.35, y = 1.6, label = low_salary_kaggler_afford_years, size = 5, colour = light_blue, family = 'Helvetica') +
annotate("text", x = 5.5, y = 1.6, label = mid_salary_kaggler_afford_months, size = 5, colour = light_blue, family = 'Helvetica') +
annotate("text", x = 7.75, y = 1.6, label = high_salary_kaggler_afford_days, size = 5, colour = light_blue, family = 'Helvetica')
library(png)
library(grid)
img <- readPNG("../gpu_afford.png")
g <- rasterGrob(img, interpolate=TRUE)
fig(10, 10)
qplot(1:10, 1:10, geom="blank") +
annotation_custom(g, xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf) + theme_void() +
annotate("text", x = 3.35, y = 1.6, label = low_salary_kaggler_afford_years, size = 5, colour = light_blue, family = 'Helvetica') +
annotate("text", x = 5.5, y = 1.6, label = mid_salary_kaggler_afford_months, size = 5, colour = light_blue, family = 'Helvetica') +
annotate("text", x = 7.75, y = 1.6, label = high_salary_kaggler_afford_days, size = 5, colour = light_blue, family = 'Helvetica')
python_cmds = "
new_ppp_cats_data['Q_11'] = new_ppp_cats_data['Q_11'].map({
'$100-$999': '100-999',
'$10,000-$99,999': '10000-99999',
'$1000-$9,999': '1000-9999',
'$0 ($USD)': '0',
'$1-$99': '1-99',
'$100,000 or more ($USD)': '>100000'
})
money_spent_order = ['0', '1-99', '100-999', '1000-9999', '10000-99999', '>100000']
money_spent = pd.pivot_table(new_ppp_cats_data.groupby(['final_mid_salary_cats', 'Q_11'])['kaggler_id'].aggregate('count').reset_index(drop = False), index = 'final_mid_salary_cats', columns = 'Q_11')['kaggler_id'][money_spent_order].loc[['low', 'medium', 'high']]
money_spent_plot_df = money_spent / np.repeat(money_spent.sum(axis = 1).values, repeats = 6).reshape((3, 6)) * 100
"
py_run_string(python_cmds)
"
python_cmds = "
coding_exp_order = ['< 1 years', '1-3 years', '3-5 years', '5-10 years', '10-20 years', '20+ years']
python_cmds <- "
coding_exp_order = ['< 1 years', '1-3 years', '3-5 years', '5-10 years', '10-20 years', '20+ years']
coding_exp = pd.pivot_table(new_ppp_cats_data.groupby(['final_mid_salary_cats', 'Q_4'])['kaggler_id'].aggregate('count').reset_index(drop = False), index = 'final_mid_salary_cats', columns = 'Q_4')['kaggler_id'][coding_exp_order].loc[['low', 'medium', 'high']]
coding_exp_plot_df = coding_exp / np.repeat(coding_exp.sum(axis = 1).values, repeats = 6).reshape((3, 6)) * 100
"
py_run_string(python_cmds)
head(py$coding_exp_plot_df)
py$coding_exp_plot_df <- melt(py$coding_exp_plot_df)
python_cmds <- "
coding_exp_order = ['< 1 years', '1-3 years', '3-5 years', '5-10 years', '10-20 years', '20+ years']
coding_exp = pd.pivot_table(new_ppp_cats_data.groupby(['final_mid_salary_cats', 'Q_4'])['kaggler_id'].aggregate('count').reset_index(drop = False), index = 'final_mid_salary_cats', columns = 'Q_4')['kaggler_id'][coding_exp_order].loc[['low', 'medium', 'high']]
coding_exp_plot_df = coding_exp / np.repeat(coding_exp.sum(axis = 1).values, repeats = 6).reshape((3, 6)) * 100
"
py_run_string(python_cmds)
py$coding_exp_plot_df <- melt(py$coding_exp_plot_df, id.vars = colnames(py$coding_exp_plot_df))
py$coding_exp_plot_df$id <- c('low-salary', 'mid-salary', 'high-salary')
py$coding_exp_plot_df$id <- factor(py$coding_exp_plot_df$id, levels = c('low-salary', 'mid-salary', 'high-salary'))
py$coding_exp_plot_df$text <- apply(py$coding_exp_plot_df, 1, function(x) { paste(round(as.numeric(x['value']) * 100) / 100, "% of ", x['id'], " Kagglers have\n", x['variable'], " of coding experience", sep = "") })
g <- ggplot(data = py$coding_exp_plot_df, aes(x = id, y = variable, fill = value, text = text)) + geom_tile() + theme_ipsum()
g <- g +
basic_plot_dec() +
basic_color_dec(light_blue) +
basic_orient_dec() +
labs(title = "Coding Experience vs. Salary", subtitle = "Heatmap", fill = "Percentage") +
xlab("Salary Category") +
ylab("Coding Experience") +
theme(
legend.title = element_text(colour = white, face = 'bold'),
legend.text = element_text(colour = white),
legend.background = element_rect(fill = alpha(light_blue, 0)),
legend.key = element_rect(fill = alpha(light_blue, 0)),
legend.position = c(0.95, 0.6),
legend.key.height = unit(1.5, "cm"),
axis.text.x = element_text(angle = 0)
)
g <- ggplotly(g, tooltip="text")
head(py$coding_exp_plot_df)
python_cmds = "
new_ppp_cats_data = pd.merge(new_ppp_data, new_age_ppp_data, how = 'left', on = 'kaggler_id')
"
py_run_string(python_cmds)
python_cmds <- "
coding_exp_order = ['< 1 years', '1-3 years', '3-5 years', '5-10 years', '10-20 years', '20+ years']
coding_exp = pd.pivot_table(new_ppp_cats_data.groupby(['final_mid_salary_cats', 'Q_4'])['kaggler_id'].aggregate('count').reset_index(drop = False), index = 'final_mid_salary_cats', columns = 'Q_4')['kaggler_id'][coding_exp_order].loc[['low', 'medium', 'high']]
coding_exp_plot_df = coding_exp / np.repeat(coding_exp.sum(axis = 1).values, repeats = 6).reshape((3, 6)) * 100
"
py_run_string(python_cmds)
py$coding_exp_plot_df <- melt(py$coding_exp_plot_df, measure.vars = colnames(py$coding_exp_plot_df))
py$coding_exp_plot_df$id <- c('low-salary', 'mid-salary', 'high-salary')
py$coding_exp_plot_df$id <- factor(py$coding_exp_plot_df$id, levels = c('low-salary', 'mid-salary', 'high-salary'))
py$coding_exp_plot_df$text <- apply(py$coding_exp_plot_df, 1, function(x) { paste(round(as.numeric(x['value']) * 100) / 100, "% of ", x['id'], " Kagglers have\n", x['variable'], " of coding experience", sep = "") })
g <- ggplot(data = py$coding_exp_plot_df, aes(x = id, y = variable, fill = value, text = text)) + geom_tile() + theme_ipsum()
g <- g +
basic_plot_dec() +
basic_color_dec(light_blue) +
basic_orient_dec() +
labs(title = "Coding Experience vs. Salary", subtitle = "Heatmap", fill = "Percentage") +
xlab("Salary Category") +
ylab("Coding Experience") +
theme(
legend.title = element_text(colour = white, face = 'bold'),
legend.text = element_text(colour = white),
legend.background = element_rect(fill = alpha(light_blue, 0)),
legend.key = element_rect(fill = alpha(light_blue, 0)),
legend.position = c(0.95, 0.6),
legend.key.height = unit(1.5, "cm"),
axis.text.x = element_text(angle = 0)
)
g <- ggplotly(g, tooltip="text")
g
python_cmds = "
new_ppp_cats_data = pd.merge(new_ppp_data, new_age_ppp_data, how = 'left', on = 'kaggler_id')
"
py_run_string(python_cmds)
python_cmds <- "
coding_exp_order = ['< 1 years', '1-3 years', '3-5 years', '5-10 years', '10-20 years', '20+ years']
coding_exp = pd.pivot_table(new_ppp_cats_data.groupby(['final_mid_salary_cats', 'Q_4'])['kaggler_id'].aggregate('count').reset_index(drop = False), index = 'final_mid_salary_cats', columns = 'Q_4')['kaggler_id'][coding_exp_order].loc[['low', 'medium', 'high']]
coding_exp_plot_df = coding_exp / np.repeat(coding_exp.sum(axis = 1).values, repeats = 6).reshape((3, 6)) * 100
"
py_run_string(python_cmds)
py$coding_exp_plot_df <- melt(py$coding_exp_plot_df, measure.vars = colnames(py$coding_exp_plot_df))
head(py$coding_exp_plot_df)
max(c(0, 2, 3))
